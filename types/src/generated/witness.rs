// Generated by Molecule 0.7.3

use super::basic::*;
use super::cell::*;
use molecule::prelude::*;
#[derive(Clone)]
pub struct CloseChannel(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for CloseChannel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for CloseChannel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for CloseChannel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "channel_id", self.channel_id())?;
        write!(f, ", {}: {}", "version", self.version())?;
        write!(f, ", {}: {}", "balance2", self.balance2())?;
        write!(f, ", {}: {}", "tx_root", self.tx_root())?;
        write!(f, ", {}: {}", "signature2", self.signature2())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for CloseChannel {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0,
        ];
        CloseChannel::new_unchecked(v.into())
    }
}
impl CloseChannel {
    pub const FIELD_COUNT: usize = 5;
    pub const FIELD_SIZES: [usize; 5] = [32, 8, 64, 32, 130];
    pub const TOTAL_SIZE: usize = 266;

    pub fn channel_id(&self) -> Byte32 {
        Byte32::new_unchecked(self.0.slice(0..32))
    }

    pub fn version(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(32..40))
    }

    pub fn balance2(&self) -> Balance2 {
        Balance2::new_unchecked(self.0.slice(40..104))
    }

    pub fn tx_root(&self) -> Byte32 {
        Byte32::new_unchecked(self.0.slice(104..136))
    }

    pub fn signature2(&self) -> Signature2 {
        Signature2::new_unchecked(self.0.slice(136..266))
    }

    pub fn as_reader<'r>(&'r self) -> CloseChannelReader<'r> {
        CloseChannelReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for CloseChannel {
    type Builder = CloseChannelBuilder;

    const NAME: &'static str = "CloseChannel";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        CloseChannel(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        CloseChannelReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        CloseChannelReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .channel_id(self.channel_id())
            .version(self.version())
            .balance2(self.balance2())
            .tx_root(self.tx_root())
            .signature2(self.signature2())
    }
}
#[derive(Clone, Copy)]
pub struct CloseChannelReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for CloseChannelReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for CloseChannelReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for CloseChannelReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "channel_id", self.channel_id())?;
        write!(f, ", {}: {}", "version", self.version())?;
        write!(f, ", {}: {}", "balance2", self.balance2())?;
        write!(f, ", {}: {}", "tx_root", self.tx_root())?;
        write!(f, ", {}: {}", "signature2", self.signature2())?;
        write!(f, " }}")
    }
}
impl<'r> CloseChannelReader<'r> {
    pub const FIELD_COUNT: usize = 5;
    pub const FIELD_SIZES: [usize; 5] = [32, 8, 64, 32, 130];
    pub const TOTAL_SIZE: usize = 266;

    pub fn channel_id(&self) -> Byte32Reader<'r> {
        Byte32Reader::new_unchecked(&self.as_slice()[0..32])
    }

    pub fn version(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[32..40])
    }

    pub fn balance2(&self) -> Balance2Reader<'r> {
        Balance2Reader::new_unchecked(&self.as_slice()[40..104])
    }

    pub fn tx_root(&self) -> Byte32Reader<'r> {
        Byte32Reader::new_unchecked(&self.as_slice()[104..136])
    }

    pub fn signature2(&self) -> Signature2Reader<'r> {
        Signature2Reader::new_unchecked(&self.as_slice()[136..266])
    }
}
impl<'r> molecule::prelude::Reader<'r> for CloseChannelReader<'r> {
    type Entity = CloseChannel;

    const NAME: &'static str = "CloseChannelReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        CloseChannelReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct CloseChannelBuilder {
    pub(crate) channel_id: Byte32,
    pub(crate) version:    Uint64,
    pub(crate) balance2:   Balance2,
    pub(crate) tx_root:    Byte32,
    pub(crate) signature2: Signature2,
}
impl CloseChannelBuilder {
    pub const FIELD_COUNT: usize = 5;
    pub const FIELD_SIZES: [usize; 5] = [32, 8, 64, 32, 130];
    pub const TOTAL_SIZE: usize = 266;

    pub fn channel_id(mut self, v: Byte32) -> Self {
        self.channel_id = v;
        self
    }

    pub fn version(mut self, v: Uint64) -> Self {
        self.version = v;
        self
    }

    pub fn balance2(mut self, v: Balance2) -> Self {
        self.balance2 = v;
        self
    }

    pub fn tx_root(mut self, v: Byte32) -> Self {
        self.tx_root = v;
        self
    }

    pub fn signature2(mut self, v: Signature2) -> Self {
        self.signature2 = v;
        self
    }
}
impl molecule::prelude::Builder for CloseChannelBuilder {
    type Entity = CloseChannel;

    const NAME: &'static str = "CloseChannelBuilder";

    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.channel_id.as_slice())?;
        writer.write_all(self.version.as_slice())?;
        writer.write_all(self.balance2.as_slice())?;
        writer.write_all(self.tx_root.as_slice())?;
        writer.write_all(self.signature2.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        CloseChannel::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct UpdateChannel(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for UpdateChannel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for UpdateChannel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for UpdateChannel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "channel_id", self.channel_id())?;
        write!(f, ", {}: {}", "version", self.version())?;
        write!(f, ", {}: {}", "balance2", self.balance2())?;
        write!(f, ", {}: {}", "tx_root", self.tx_root())?;
        write!(f, ", {}: {}", "signature2", self.signature2())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for UpdateChannel {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0,
        ];
        UpdateChannel::new_unchecked(v.into())
    }
}
impl UpdateChannel {
    pub const FIELD_COUNT: usize = 5;
    pub const FIELD_SIZES: [usize; 5] = [32, 8, 64, 32, 130];
    pub const TOTAL_SIZE: usize = 266;

    pub fn channel_id(&self) -> Byte32 {
        Byte32::new_unchecked(self.0.slice(0..32))
    }

    pub fn version(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(32..40))
    }

    pub fn balance2(&self) -> Balance2 {
        Balance2::new_unchecked(self.0.slice(40..104))
    }

    pub fn tx_root(&self) -> Byte32 {
        Byte32::new_unchecked(self.0.slice(104..136))
    }

    pub fn signature2(&self) -> Signature2 {
        Signature2::new_unchecked(self.0.slice(136..266))
    }

    pub fn as_reader<'r>(&'r self) -> UpdateChannelReader<'r> {
        UpdateChannelReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for UpdateChannel {
    type Builder = UpdateChannelBuilder;

    const NAME: &'static str = "UpdateChannel";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        UpdateChannel(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        UpdateChannelReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        UpdateChannelReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .channel_id(self.channel_id())
            .version(self.version())
            .balance2(self.balance2())
            .tx_root(self.tx_root())
            .signature2(self.signature2())
    }
}
#[derive(Clone, Copy)]
pub struct UpdateChannelReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for UpdateChannelReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for UpdateChannelReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for UpdateChannelReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "channel_id", self.channel_id())?;
        write!(f, ", {}: {}", "version", self.version())?;
        write!(f, ", {}: {}", "balance2", self.balance2())?;
        write!(f, ", {}: {}", "tx_root", self.tx_root())?;
        write!(f, ", {}: {}", "signature2", self.signature2())?;
        write!(f, " }}")
    }
}
impl<'r> UpdateChannelReader<'r> {
    pub const FIELD_COUNT: usize = 5;
    pub const FIELD_SIZES: [usize; 5] = [32, 8, 64, 32, 130];
    pub const TOTAL_SIZE: usize = 266;

    pub fn channel_id(&self) -> Byte32Reader<'r> {
        Byte32Reader::new_unchecked(&self.as_slice()[0..32])
    }

    pub fn version(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[32..40])
    }

    pub fn balance2(&self) -> Balance2Reader<'r> {
        Balance2Reader::new_unchecked(&self.as_slice()[40..104])
    }

    pub fn tx_root(&self) -> Byte32Reader<'r> {
        Byte32Reader::new_unchecked(&self.as_slice()[104..136])
    }

    pub fn signature2(&self) -> Signature2Reader<'r> {
        Signature2Reader::new_unchecked(&self.as_slice()[136..266])
    }
}
impl<'r> molecule::prelude::Reader<'r> for UpdateChannelReader<'r> {
    type Entity = UpdateChannel;

    const NAME: &'static str = "UpdateChannelReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        UpdateChannelReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct UpdateChannelBuilder {
    pub(crate) channel_id: Byte32,
    pub(crate) version:    Uint64,
    pub(crate) balance2:   Balance2,
    pub(crate) tx_root:    Byte32,
    pub(crate) signature2: Signature2,
}
impl UpdateChannelBuilder {
    pub const FIELD_COUNT: usize = 5;
    pub const FIELD_SIZES: [usize; 5] = [32, 8, 64, 32, 130];
    pub const TOTAL_SIZE: usize = 266;

    pub fn channel_id(mut self, v: Byte32) -> Self {
        self.channel_id = v;
        self
    }

    pub fn version(mut self, v: Uint64) -> Self {
        self.version = v;
        self
    }

    pub fn balance2(mut self, v: Balance2) -> Self {
        self.balance2 = v;
        self
    }

    pub fn tx_root(mut self, v: Byte32) -> Self {
        self.tx_root = v;
        self
    }

    pub fn signature2(mut self, v: Signature2) -> Self {
        self.signature2 = v;
        self
    }
}
impl molecule::prelude::Builder for UpdateChannelBuilder {
    type Entity = UpdateChannel;

    const NAME: &'static str = "UpdateChannelBuilder";

    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.channel_id.as_slice())?;
        writer.write_all(self.version.as_slice())?;
        writer.write_all(self.balance2.as_slice())?;
        writer.write_all(self.tx_root.as_slice())?;
        writer.write_all(self.signature2.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        UpdateChannel::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct PendingTransferKey(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for PendingTransferKey {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for PendingTransferKey {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for PendingTransferKey {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "version", self.version())?;
        write!(f, ", {}: {}", "raw_tx", self.raw_tx())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for PendingTransferKey {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        PendingTransferKey::new_unchecked(v.into())
    }
}
impl PendingTransferKey {
    pub const FIELD_COUNT: usize = 2;
    pub const FIELD_SIZES: [usize; 2] = [8, 209];
    pub const TOTAL_SIZE: usize = 217;

    pub fn version(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(0..8))
    }

    pub fn raw_tx(&self) -> RawTx {
        RawTx::new_unchecked(self.0.slice(8..217))
    }

    pub fn as_reader<'r>(&'r self) -> PendingTransferKeyReader<'r> {
        PendingTransferKeyReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for PendingTransferKey {
    type Builder = PendingTransferKeyBuilder;

    const NAME: &'static str = "PendingTransferKey";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        PendingTransferKey(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        PendingTransferKeyReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        PendingTransferKeyReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .version(self.version())
            .raw_tx(self.raw_tx())
    }
}
#[derive(Clone, Copy)]
pub struct PendingTransferKeyReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for PendingTransferKeyReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for PendingTransferKeyReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for PendingTransferKeyReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "version", self.version())?;
        write!(f, ", {}: {}", "raw_tx", self.raw_tx())?;
        write!(f, " }}")
    }
}
impl<'r> PendingTransferKeyReader<'r> {
    pub const FIELD_COUNT: usize = 2;
    pub const FIELD_SIZES: [usize; 2] = [8, 209];
    pub const TOTAL_SIZE: usize = 217;

    pub fn version(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[0..8])
    }

    pub fn raw_tx(&self) -> RawTxReader<'r> {
        RawTxReader::new_unchecked(&self.as_slice()[8..217])
    }
}
impl<'r> molecule::prelude::Reader<'r> for PendingTransferKeyReader<'r> {
    type Entity = PendingTransferKey;

    const NAME: &'static str = "PendingTransferKeyReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        PendingTransferKeyReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct PendingTransferKeyBuilder {
    pub(crate) version: Uint64,
    pub(crate) raw_tx:  RawTx,
}
impl PendingTransferKeyBuilder {
    pub const FIELD_COUNT: usize = 2;
    pub const FIELD_SIZES: [usize; 2] = [8, 209];
    pub const TOTAL_SIZE: usize = 217;

    pub fn version(mut self, v: Uint64) -> Self {
        self.version = v;
        self
    }

    pub fn raw_tx(mut self, v: RawTx) -> Self {
        self.raw_tx = v;
        self
    }
}
impl molecule::prelude::Builder for PendingTransferKeyBuilder {
    type Entity = PendingTransferKey;

    const NAME: &'static str = "PendingTransferKeyBuilder";

    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.version.as_slice())?;
        writer.write_all(self.raw_tx.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        PendingTransferKey::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct PendingTransferKeyVec(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for PendingTransferKeyVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for PendingTransferKeyVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for PendingTransferKeyVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for PendingTransferKeyVec {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0];
        PendingTransferKeyVec::new_unchecked(v.into())
    }
}
impl PendingTransferKeyVec {
    pub const ITEM_SIZE: usize = 217;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.item_count()
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<PendingTransferKey> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> PendingTransferKey {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        PendingTransferKey::new_unchecked(self.0.slice(start..end))
    }

    pub fn as_reader<'r>(&'r self) -> PendingTransferKeyVecReader<'r> {
        PendingTransferKeyVecReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for PendingTransferKeyVec {
    type Builder = PendingTransferKeyVecBuilder;

    const NAME: &'static str = "PendingTransferKeyVec";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        PendingTransferKeyVec(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        PendingTransferKeyVecReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        PendingTransferKeyVecReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct PendingTransferKeyVecReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for PendingTransferKeyVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for PendingTransferKeyVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for PendingTransferKeyVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> PendingTransferKeyVecReader<'r> {
    pub const ITEM_SIZE: usize = 217;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.item_count()
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<PendingTransferKeyReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> PendingTransferKeyReader<'r> {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        PendingTransferKeyReader::new_unchecked(&self.as_slice()[start..end])
    }
}
impl<'r> molecule::prelude::Reader<'r> for PendingTransferKeyVecReader<'r> {
    type Entity = PendingTransferKeyVec;

    const NAME: &'static str = "PendingTransferKeyVecReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        PendingTransferKeyVecReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_count = molecule::unpack_number(slice) as usize;
        if item_count == 0 {
            if slice_len != molecule::NUMBER_SIZE {
                return ve!(Self, TotalSizeNotMatch, molecule::NUMBER_SIZE, slice_len);
            }
            return Ok(());
        }
        let total_size = molecule::NUMBER_SIZE + Self::ITEM_SIZE * item_count;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct PendingTransferKeyVecBuilder(pub(crate) Vec<PendingTransferKey>);
impl PendingTransferKeyVecBuilder {
    pub const ITEM_SIZE: usize = 217;

    pub fn set(mut self, v: Vec<PendingTransferKey>) -> Self {
        self.0 = v;
        self
    }

    pub fn push(mut self, v: PendingTransferKey) -> Self {
        self.0.push(v);
        self
    }

    pub fn extend<T: ::core::iter::IntoIterator<Item = PendingTransferKey>>(
        mut self,
        iter: T,
    ) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }

    pub fn replace(&mut self, index: usize, v: PendingTransferKey) -> Option<PendingTransferKey> {
        self.0
            .get_mut(index)
            .map(|item| ::core::mem::replace(item, v))
    }
}
impl molecule::prelude::Builder for PendingTransferKeyVecBuilder {
    type Entity = PendingTransferKeyVec;

    const NAME: &'static str = "PendingTransferKeyVecBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.0.len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.len() as molecule::Number))?;
        for inner in &self.0[..] {
            writer.write_all(inner.as_slice())?;
        }
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        PendingTransferKeyVec::new_unchecked(inner.into())
    }
}
pub struct PendingTransferKeyVecIterator(PendingTransferKeyVec, usize, usize);
impl ::core::iter::Iterator for PendingTransferKeyVecIterator {
    type Item = PendingTransferKey;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for PendingTransferKeyVecIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for PendingTransferKeyVec {
    type IntoIter = PendingTransferKeyVecIterator;
    type Item = PendingTransferKey;

    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        PendingTransferKeyVecIterator(self, 0, len)
    }
}
impl<'r> PendingTransferKeyVecReader<'r> {
    pub fn iter<'t>(&'t self) -> PendingTransferKeyVecReaderIterator<'t, 'r> {
        PendingTransferKeyVecReaderIterator(&self, 0, self.len())
    }
}
pub struct PendingTransferKeyVecReaderIterator<'t, 'r>(
    &'t PendingTransferKeyVecReader<'r>,
    usize,
    usize,
);
impl<'t: 'r, 'r> ::core::iter::Iterator for PendingTransferKeyVecReaderIterator<'t, 'r> {
    type Item = PendingTransferKeyReader<'t>;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for PendingTransferKeyVecReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct Byte32Vec(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for Byte32Vec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for Byte32Vec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for Byte32Vec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for Byte32Vec {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0];
        Byte32Vec::new_unchecked(v.into())
    }
}
impl Byte32Vec {
    pub const ITEM_SIZE: usize = 32;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.item_count()
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<Byte32> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> Byte32 {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        Byte32::new_unchecked(self.0.slice(start..end))
    }

    pub fn as_reader<'r>(&'r self) -> Byte32VecReader<'r> {
        Byte32VecReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for Byte32Vec {
    type Builder = Byte32VecBuilder;

    const NAME: &'static str = "Byte32Vec";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        Byte32Vec(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        Byte32VecReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        Byte32VecReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct Byte32VecReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for Byte32VecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for Byte32VecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for Byte32VecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> Byte32VecReader<'r> {
    pub const ITEM_SIZE: usize = 32;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.item_count()
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<Byte32Reader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> Byte32Reader<'r> {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
}
impl<'r> molecule::prelude::Reader<'r> for Byte32VecReader<'r> {
    type Entity = Byte32Vec;

    const NAME: &'static str = "Byte32VecReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        Byte32VecReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_count = molecule::unpack_number(slice) as usize;
        if item_count == 0 {
            if slice_len != molecule::NUMBER_SIZE {
                return ve!(Self, TotalSizeNotMatch, molecule::NUMBER_SIZE, slice_len);
            }
            return Ok(());
        }
        let total_size = molecule::NUMBER_SIZE + Self::ITEM_SIZE * item_count;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct Byte32VecBuilder(pub(crate) Vec<Byte32>);
impl Byte32VecBuilder {
    pub const ITEM_SIZE: usize = 32;

    pub fn set(mut self, v: Vec<Byte32>) -> Self {
        self.0 = v;
        self
    }

    pub fn push(mut self, v: Byte32) -> Self {
        self.0.push(v);
        self
    }

    pub fn extend<T: ::core::iter::IntoIterator<Item = Byte32>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }

    pub fn replace(&mut self, index: usize, v: Byte32) -> Option<Byte32> {
        self.0
            .get_mut(index)
            .map(|item| ::core::mem::replace(item, v))
    }
}
impl molecule::prelude::Builder for Byte32VecBuilder {
    type Entity = Byte32Vec;

    const NAME: &'static str = "Byte32VecBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.0.len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.len() as molecule::Number))?;
        for inner in &self.0[..] {
            writer.write_all(inner.as_slice())?;
        }
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        Byte32Vec::new_unchecked(inner.into())
    }
}
pub struct Byte32VecIterator(Byte32Vec, usize, usize);
impl ::core::iter::Iterator for Byte32VecIterator {
    type Item = Byte32;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for Byte32VecIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for Byte32Vec {
    type IntoIter = Byte32VecIterator;
    type Item = Byte32;

    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        Byte32VecIterator(self, 0, len)
    }
}
impl<'r> Byte32VecReader<'r> {
    pub fn iter<'t>(&'t self) -> Byte32VecReaderIterator<'t, 'r> {
        Byte32VecReaderIterator(&self, 0, self.len())
    }
}
pub struct Byte32VecReaderIterator<'t, 'r>(&'t Byte32VecReader<'r>, usize, usize);
impl<'t: 'r, 'r> ::core::iter::Iterator for Byte32VecReaderIterator<'t, 'r> {
    type Item = Byte32Reader<'t>;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for Byte32VecReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct SettleIdxs(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for SettleIdxs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for SettleIdxs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for SettleIdxs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for SettleIdxs {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0];
        SettleIdxs::new_unchecked(v.into())
    }
}
impl SettleIdxs {
    pub const ITEM_SIZE: usize = 4;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.item_count()
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<Uint32> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> Uint32 {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        Uint32::new_unchecked(self.0.slice(start..end))
    }

    pub fn as_reader<'r>(&'r self) -> SettleIdxsReader<'r> {
        SettleIdxsReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for SettleIdxs {
    type Builder = SettleIdxsBuilder;

    const NAME: &'static str = "SettleIdxs";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        SettleIdxs(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SettleIdxsReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SettleIdxsReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct SettleIdxsReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for SettleIdxsReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for SettleIdxsReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for SettleIdxsReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> SettleIdxsReader<'r> {
    pub const ITEM_SIZE: usize = 4;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.item_count()
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<Uint32Reader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> Uint32Reader<'r> {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        Uint32Reader::new_unchecked(&self.as_slice()[start..end])
    }
}
impl<'r> molecule::prelude::Reader<'r> for SettleIdxsReader<'r> {
    type Entity = SettleIdxs;

    const NAME: &'static str = "SettleIdxsReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        SettleIdxsReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_count = molecule::unpack_number(slice) as usize;
        if item_count == 0 {
            if slice_len != molecule::NUMBER_SIZE {
                return ve!(Self, TotalSizeNotMatch, molecule::NUMBER_SIZE, slice_len);
            }
            return Ok(());
        }
        let total_size = molecule::NUMBER_SIZE + Self::ITEM_SIZE * item_count;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct SettleIdxsBuilder(pub(crate) Vec<Uint32>);
impl SettleIdxsBuilder {
    pub const ITEM_SIZE: usize = 4;

    pub fn set(mut self, v: Vec<Uint32>) -> Self {
        self.0 = v;
        self
    }

    pub fn push(mut self, v: Uint32) -> Self {
        self.0.push(v);
        self
    }

    pub fn extend<T: ::core::iter::IntoIterator<Item = Uint32>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }

    pub fn replace(&mut self, index: usize, v: Uint32) -> Option<Uint32> {
        self.0
            .get_mut(index)
            .map(|item| ::core::mem::replace(item, v))
    }
}
impl molecule::prelude::Builder for SettleIdxsBuilder {
    type Entity = SettleIdxs;

    const NAME: &'static str = "SettleIdxsBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.0.len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.len() as molecule::Number))?;
        for inner in &self.0[..] {
            writer.write_all(inner.as_slice())?;
        }
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        SettleIdxs::new_unchecked(inner.into())
    }
}
pub struct SettleIdxsIterator(SettleIdxs, usize, usize);
impl ::core::iter::Iterator for SettleIdxsIterator {
    type Item = Uint32;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for SettleIdxsIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for SettleIdxs {
    type IntoIter = SettleIdxsIterator;
    type Item = Uint32;

    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        SettleIdxsIterator(self, 0, len)
    }
}
impl<'r> SettleIdxsReader<'r> {
    pub fn iter<'t>(&'t self) -> SettleIdxsReaderIterator<'t, 'r> {
        SettleIdxsReaderIterator(&self, 0, self.len())
    }
}
pub struct SettleIdxsReaderIterator<'t, 'r>(&'t SettleIdxsReader<'r>, usize, usize);
impl<'t: 'r, 'r> ::core::iter::Iterator for SettleIdxsReaderIterator<'t, 'r> {
    type Item = Uint32Reader<'t>;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for SettleIdxsReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct SettleChannel(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for SettleChannel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for SettleChannel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for SettleChannel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "keys", self.keys())?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        write!(f, ", {}: {}", "pre_images", self.pre_images())?;
        write!(f, ", {}: {}", "settle_keys", self.settle_keys())?;
        write!(f, ", {}: {}", "non_exists_proof", self.non_exists_proof())?;
        write!(
            f,
            ", {}: {}",
            "challenge_settle_tx_root",
            self.challenge_settle_tx_root()
        )?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for SettleChannel {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            80, 0, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 36, 0, 0, 0, 40, 0, 0, 0, 44, 0, 0, 0, 48, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        SettleChannel::new_unchecked(v.into())
    }
}
impl SettleChannel {
    pub const FIELD_COUNT: usize = 6;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn keys(&self) -> PendingTransferKeyVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        PendingTransferKeyVec::new_unchecked(self.0.slice(start..end))
    }

    pub fn proof(&self) -> Bytes {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        Bytes::new_unchecked(self.0.slice(start..end))
    }

    pub fn pre_images(&self) -> Byte32Vec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        Byte32Vec::new_unchecked(self.0.slice(start..end))
    }

    pub fn settle_keys(&self) -> SettleIdxs {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        SettleIdxs::new_unchecked(self.0.slice(start..end))
    }

    pub fn non_exists_proof(&self) -> Bytes {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        Bytes::new_unchecked(self.0.slice(start..end))
    }

    pub fn challenge_settle_tx_root(&self) -> Byte32 {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[28..]) as usize;
            Byte32::new_unchecked(self.0.slice(start..end))
        } else {
            Byte32::new_unchecked(self.0.slice(start..))
        }
    }

    pub fn as_reader<'r>(&'r self) -> SettleChannelReader<'r> {
        SettleChannelReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for SettleChannel {
    type Builder = SettleChannelBuilder;

    const NAME: &'static str = "SettleChannel";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        SettleChannel(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SettleChannelReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SettleChannelReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .keys(self.keys())
            .proof(self.proof())
            .pre_images(self.pre_images())
            .settle_keys(self.settle_keys())
            .non_exists_proof(self.non_exists_proof())
            .challenge_settle_tx_root(self.challenge_settle_tx_root())
    }
}
#[derive(Clone, Copy)]
pub struct SettleChannelReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for SettleChannelReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for SettleChannelReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for SettleChannelReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "keys", self.keys())?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        write!(f, ", {}: {}", "pre_images", self.pre_images())?;
        write!(f, ", {}: {}", "settle_keys", self.settle_keys())?;
        write!(f, ", {}: {}", "non_exists_proof", self.non_exists_proof())?;
        write!(
            f,
            ", {}: {}",
            "challenge_settle_tx_root",
            self.challenge_settle_tx_root()
        )?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> SettleChannelReader<'r> {
    pub const FIELD_COUNT: usize = 6;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn keys(&self) -> PendingTransferKeyVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        PendingTransferKeyVecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn proof(&self) -> BytesReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        BytesReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn pre_images(&self) -> Byte32VecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        Byte32VecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn settle_keys(&self) -> SettleIdxsReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        SettleIdxsReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn non_exists_proof(&self) -> BytesReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        let end = molecule::unpack_number(&slice[24..]) as usize;
        BytesReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn challenge_settle_tx_root(&self) -> Byte32Reader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[24..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[28..]) as usize;
            Byte32Reader::new_unchecked(&self.as_slice()[start..end])
        } else {
            Byte32Reader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for SettleChannelReader<'r> {
    type Entity = SettleChannel;

    const NAME: &'static str = "SettleChannelReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        SettleChannelReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        PendingTransferKeyVecReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        BytesReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        Byte32VecReader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        SettleIdxsReader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        BytesReader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        Byte32Reader::verify(&slice[offsets[5]..offsets[6]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct SettleChannelBuilder {
    pub(crate) keys:                     PendingTransferKeyVec,
    pub(crate) proof:                    Bytes,
    pub(crate) pre_images:               Byte32Vec,
    pub(crate) settle_keys:              SettleIdxs,
    pub(crate) non_exists_proof:         Bytes,
    pub(crate) challenge_settle_tx_root: Byte32,
}
impl SettleChannelBuilder {
    pub const FIELD_COUNT: usize = 6;

    pub fn keys(mut self, v: PendingTransferKeyVec) -> Self {
        self.keys = v;
        self
    }

    pub fn proof(mut self, v: Bytes) -> Self {
        self.proof = v;
        self
    }

    pub fn pre_images(mut self, v: Byte32Vec) -> Self {
        self.pre_images = v;
        self
    }

    pub fn settle_keys(mut self, v: SettleIdxs) -> Self {
        self.settle_keys = v;
        self
    }

    pub fn non_exists_proof(mut self, v: Bytes) -> Self {
        self.non_exists_proof = v;
        self
    }

    pub fn challenge_settle_tx_root(mut self, v: Byte32) -> Self {
        self.challenge_settle_tx_root = v;
        self
    }
}
impl molecule::prelude::Builder for SettleChannelBuilder {
    type Entity = SettleChannel;

    const NAME: &'static str = "SettleChannelBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.keys.as_slice().len()
            + self.proof.as_slice().len()
            + self.pre_images.as_slice().len()
            + self.settle_keys.as_slice().len()
            + self.non_exists_proof.as_slice().len()
            + self.challenge_settle_tx_root.as_slice().len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.keys.as_slice().len();
        offsets.push(total_size);
        total_size += self.proof.as_slice().len();
        offsets.push(total_size);
        total_size += self.pre_images.as_slice().len();
        offsets.push(total_size);
        total_size += self.settle_keys.as_slice().len();
        offsets.push(total_size);
        total_size += self.non_exists_proof.as_slice().len();
        offsets.push(total_size);
        total_size += self.challenge_settle_tx_root.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.keys.as_slice())?;
        writer.write_all(self.proof.as_slice())?;
        writer.write_all(self.pre_images.as_slice())?;
        writer.write_all(self.settle_keys.as_slice())?;
        writer.write_all(self.non_exists_proof.as_slice())?;
        writer.write_all(self.challenge_settle_tx_root.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        SettleChannel::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct FinalizeChannel(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for FinalizeChannel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for FinalizeChannel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for FinalizeChannel {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "signature2", self.signature2())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for FinalizeChannel {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        FinalizeChannel::new_unchecked(v.into())
    }
}
impl FinalizeChannel {
    pub const FIELD_COUNT: usize = 1;
    pub const FIELD_SIZES: [usize; 1] = [130];
    pub const TOTAL_SIZE: usize = 130;

    pub fn signature2(&self) -> Signature2 {
        Signature2::new_unchecked(self.0.slice(0..130))
    }

    pub fn as_reader<'r>(&'r self) -> FinalizeChannelReader<'r> {
        FinalizeChannelReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for FinalizeChannel {
    type Builder = FinalizeChannelBuilder;

    const NAME: &'static str = "FinalizeChannel";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        FinalizeChannel(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        FinalizeChannelReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        FinalizeChannelReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().signature2(self.signature2())
    }
}
#[derive(Clone, Copy)]
pub struct FinalizeChannelReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for FinalizeChannelReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for FinalizeChannelReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for FinalizeChannelReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "signature2", self.signature2())?;
        write!(f, " }}")
    }
}
impl<'r> FinalizeChannelReader<'r> {
    pub const FIELD_COUNT: usize = 1;
    pub const FIELD_SIZES: [usize; 1] = [130];
    pub const TOTAL_SIZE: usize = 130;

    pub fn signature2(&self) -> Signature2Reader<'r> {
        Signature2Reader::new_unchecked(&self.as_slice()[0..130])
    }
}
impl<'r> molecule::prelude::Reader<'r> for FinalizeChannelReader<'r> {
    type Entity = FinalizeChannel;

    const NAME: &'static str = "FinalizeChannelReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        FinalizeChannelReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct FinalizeChannelBuilder {
    pub(crate) signature2: Signature2,
}
impl FinalizeChannelBuilder {
    pub const FIELD_COUNT: usize = 1;
    pub const FIELD_SIZES: [usize; 1] = [130];
    pub const TOTAL_SIZE: usize = 130;

    pub fn signature2(mut self, v: Signature2) -> Self {
        self.signature2 = v;
        self
    }
}
impl molecule::prelude::Builder for FinalizeChannelBuilder {
    type Entity = FinalizeChannel;

    const NAME: &'static str = "FinalizeChannelBuilder";

    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.signature2.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        FinalizeChannel::new_unchecked(inner.into())
    }
}
